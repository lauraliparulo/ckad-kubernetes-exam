CONFIGMAP
With literal values:
> kubectl create configmap db-config --from-literal=db=staging

With environment variables in a file:
>kubectl create configmap db-config --from-env-file=config.env

From a single file:
$ kubectl create configmap db-config --from-file=config.txt

Directory containing file:
$ kubectl create configmap db-config --from-file=app-config

ConfigMap from yaml:

apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  database_url: jdbc:postgresql://localhost/test
  user: fred
  
  
To use the config map in the pod configuration you can put it under the "envFrom" section;
apiVersion: v1
kind: Pod
metadata:
  name: configured-pod
spec:
  containers:
  - image: nginx:1.19.0
    name: app
    envFrom:
    - configMapRef:
        name: backend-config

Inspect the config map for the pod:

> kubectl exec configured-pod -- env

An alternative way:

apiVersion: v1
kind: Pod
metadata:
  name: configured-pod
spec:
  containers:
  - image: nginx:1.19.0
    name: app
    env:
    - name: DATABASE_URL
      valueFrom:
        configMapKeyRef:
          name: backend-config
          key: database_url
    - name: USERNAME
      valueFrom:
        configMapKeyRef:
          name: backend-config
          key: user
          
          
Mounting configmap as volume

apiVersion: v1
kind: Pod
metadata:
  name: configured-pod
spec:
  containers:
  - image: nginx:1.19.0
    name: app
    volumeMounts:
    - name: config-volume
      mountPath: /etc/config
  volumes:
  - name: config-volume
    configMap:
      name: backend-config


To inspect the config map in the pod:
$ kubectl exec -it configured-pod -- /bin/sh
# ls -1 /etc/config

---------------------------------------------------------------------------------------------
SECRET

From literal:
> $ kubectl create secret generic db-creds --from-literal=pwd=s3cre!
From env file:
> $ kubectl create secret generic db-creds --from-env-file=secret.env
From ssh key:
> $ kubectl create secret generic ssh-key --from-file=id_rsa=~/.ssh/id_rsa

In the yaml file use "secretRef"

apiVersion: v1
kind: Pod
metadata:
  name: configured-pod
spec:
  containers:
  - image: nginx:1.19.0
    name: app
    envFrom:
    - secretRef:
        name: db-creds
        
Check secrets with:
> kubectl exec configured-pod -- env

Secret as a volume:

apiVersion: v1
kind: Pod
metadata:
  name: configured-pod
spec:
  containers:
  - image: nginx:1.19.0
    name: app
    volumeMounts:
    - name: secret-volume
      mountPath: /var/app
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: ssh-key
      


SECURITY CONTEXT


RESOURCE BOUNDARIES


RESOURCEQUOTA


SERVICE ACCOUNT
