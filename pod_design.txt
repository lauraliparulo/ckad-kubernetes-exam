
Add labels:

> kubectl run labeled-pod --image=nginx --restart=Never --labels=tier=backend,env=dev

With yaml:

apiVersion: v1
kind: Pod
metadata:
  name: labeled-pod
  labels:
    env: dev
    tier: backend
spec:
  containers:
  - image: nginx
    name: nginx
    
    
Overwrite labels:
> kubectl label pod labeled-pod region=us --overwrite
pod/labeled-pod labeled
    
see labels:
> kubectl describe pod labeled-pod | grep -C 2 Labels:
> kubectl get pod labeled-pod --show-labels

------------------------------------------
Label selector

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
spec:
  podSelector:
    matchLabels:
      tier: frontend
     
In the commands user "--selector" or "-l"
> kubectl get pods -l 'team in (shiny, legacy)',app=v1.2.4 --show-labels

--------------------------
ANNOTATIONS
For descriptive metadata you can use annotations:

apiVersion: v1
kind: Pod
metadata:
  name: annotated-pod
  annotations:
    commit: 866a8dc
    author: 'Benjamin Muschko'
    branch: 'bm/bugfix'
spec:
  containers:
  - image: nginx
    name: nginx
    
> kubectl describe pod annotated-pod | grep -C 2 Annotations:

add / Modify annotation for a live object:
kubectl annotate pod annotated-pod oncall='800-555-2000' --overwrite

-------------------------------------------------------------------
Replica Set

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deploy
  labels:
    app: my-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-deploy
  template:
    metadata:
      labels:
        app: my-deploy
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2

--------------------------------------------------
Revision rollout
> kubectl rollout history deployment my-deploy

Update container image:
>  kubectl set image deployment my-deploy nginx=nginx:1.19.2

Look at the second revision:
>  kubectl rollout history deployments my-deploy --revision=2

Rollout to a previous revision:
> kubectl rollout undo deployment my-deploy --to-revision=1


Manual scaling a deployment:
>  kubectl scale deployment my-deploy --replicas=5


Autoscaling
- Horizontal (HPA) - standard
- Vertical (VPA)

Autoscale:
> kubectl autoscale deployment my-deploy --cpu-percent=70 --min=2 --max=8
> kubectl get hpa

-----------------------------------------------------
JOBS

> kubectl create job counter --image=nginx -- /bin/sh -c 'counter=0; \
  while [ $counter -lt 3 ]; do counter=$((counter+1)); echo "$counter"; \
  sleep 3; done;' 
  
 
apiVersion: batch/v1
kind: Job
metadata:
  name: counter
spec:
  template:
    spec:
      containers:
      - name: counter
        image: nginx
        command:
        - /bin/sh
        - -c
        - counter=0; while [ $counter -lt 3 ]; do counter=$((counter+1)); \
          echo "$counter"; sleep 3; done;
      restartPolicy: Never
  
  Parameters:
  - spec.template.spec.completions
  - spec.template.spec.parallelism
  
  
  CRONJOB
  >kubectl create cronjob current-date --schedule="* * * * *" --image=nginx -- /bin/sh -c 'echo "Current date: $(date)"'
  > kubectl get cronjobs
  
  apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: current-date
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: current-date
            image: nginx
            args:
            - /bin/sh
            - -c
            - 'echo "Current date: $(date)"'
          restartPolicy: OnFailure
