set up context and namespace at the beginning of a section:

> kubectl config set-context <context-of-question> --namespace=<namespace-of-question>
---------------------------------------------------------------------------------------------
Use alias:

> alias k=kubectl; k version
---------------------------------------------------------------------------------------------
Get short names 

> kubectl api-resources

ex. persistentvolumeclaims  is "pvc"
---------------------------------------------------------------------------------------------
use grep to find what you need:

> kubectl describe pods | grep -C 10 "author=John Doe"
> kubectl get pods -o yaml | grep -C 5 labels:

to get the ip address as well:
k get pods -n ckad-prep -o wide  


Create a temporary pod with the IP
> k run busybox --image=busybox --restart=Never --rm -it -- wget -0 192.168.60.190:80

removed at the end
---------------------------------------------------------------------------------------------
Use help

> kubectl create --help
---------------------------------------------------------------------------------------------
Explore fields

> kubectl explain pods.spec 
---------------------------------------------------------------------------------------------
Get namespaces
> k get ns
---------------------------------------------------------------------------------------------
To crete an object on the fly use create, apply with files or run:
> kubectl create -f pod.yaml
> kubectl run frontend --image=nginx --restart=Never --port=80
---------------------------------------------------------------------------------------------
To create a yaml file template use the "dry-run" flag:
> kubectl run frontend --image=nginx --restart=Never --port=80 -o yaml --dry-run=client > pod.yaml
---------------------------------------------------------------------------------------------
You can delete both by the name or the yaml file:
$ kubectl delete pod frontend
pod "frontend" deleted
$ kubectl delete -f pod.yaml
pod "frontend" deleted
-----------------------------------------------------------------------------------------------
Edit a live object:
> kubectl edit pod frontend
Update a live object:
$ kubectl apply -f pod.yaml
pod/frontend configured
-----------------------------------------------------------------------------------------------
Replace a live object
kubectl replace -f pod.yaml
-----------------------------------------------------------------------------------------------
If you use a docker image (as default from the docker hub register), you can use either the run command or a yaml file:

> kubectl run hazelcast --image=hazelcast/hazelcast --restart=Never --port=5701 --env="DNS_DOMAIN=cluster" --labels="app=hazelcast,env=prod"

This is the same as : kubectl create -f pod.yaml, with the following yaml file:
  
apiVersion: v1
kind: Pod
metadata:
  name: hazelcast
  labels:
    app: hazelcast
    env: prod
spec:
  containers:
  - env:
    - name: DNS_DOMAIN
      value: cluster
    image: hazelcast/hazelcast
    name: hazelcast
    ports:
    - containerPort: 5701
  restartPolicy: Never
  
  ------------------------------------------------------------------------------------------
List pods:
> kubectl get pods
> kubectl get pods hazelcast
............................................................................................
Render pods details:
$ kubectl describe pods hazelcast
--------------------------------------------------------------------------------------------
access logs:
> kubectl logs hazelcast
use "-f" to stream the logs in real time
> kubectl logs hazelcast -f
access logs of the previous container with "-p"
> kubectl logs hazelcast -p
--------------------------------------------------------------------------------------------
Open a shell in the container to inspect it:
$ kubectl exec -it hazelcast -- /bin/sh
To execute a single command inside the container use "exec"
$ kubectl exec hazelcast -- env
--------------------------------------------------------------------------------------------
To delete a pod gracefully (takes longer):
$ kubectl delete pod hazelcast
Delete pods immediately:
> kubectl delete pod nginx --grace-period=0 --force
--------------------------------------------------------------------------------------------
Add env variables in the yaml file under spec containers, using name and value:
apiVersion: v1
kind: Pod
metadata:
  name: spring-boot-app
spec:
  containers:
  - image: bmuschko/spring-boot-app:1.5.3
    name: spring-boot-app
    env:
    - name: SPRING_PROFILES_ACTIVE
      value: prod
    - name: VERSION
      value: '1.5.3'
--------------------------------------------------------------------------------------------
Redefine(override) or add ENTRYPOINT and CMD for the image in the pod definition command:
> kubectl run mypod --image=busybox -o yaml --dry-run=client --restart=Never  > pod.yaml -- /bin/sh -c "while true; do date; sleep 10; done"
This will turn it into an args attribute in the container section in the yaml:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - args:
    - /bin/sh
    - -c
    - while true; do date; sleep 10; done
    image: busybox
    name: mypod
  restartPolicy: Never
  -----------------------------------------------------------------------------------------------------
$ kubectl get namespaces
$ kubectl create namespace code-red
$ kubectl get namespace code-red

apiVersion: v1
kind: Namespace
metadata:
  name: code-red
  
> kubectl delete namespace code-red

shortcut "-n":
> kubectl get pods -n code-red
---------------------------------------------------------------------------------------------------------
You can use the command-line option -o wide to retrieve the IP address of the Pod:

$ kubectl get pod nginx --namespace=ckad -o wide
---------------------------------------------------------------------------------------------------------
To use the API with curl you need the proxy
> kubectl proxy port=8001 &

It takes care of the TLS communication
curl http://localhost:8001

---------------------------------------------------------------------------------------------------------
> kubectl auth --help

check permissions:
> kubectl auth can-i get pods
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
